// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using DrugPrevention.Repositories.DuyenCTT.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace DrugPrevention.Repositories.DuyenCTT.DBContext;

public partial class SE18_PRN232_SE1731_G2_MaToeContext : DbContext
{
    public SE18_PRN232_SE1731_G2_MaToeContext()
    {
    }

    public SE18_PRN232_SE1731_G2_MaToeContext(DbContextOptions<SE18_PRN232_SE1731_G2_MaToeContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<Blog> Blogs { get; set; }

    public virtual DbSet<CommunityProgram> CommunityPrograms { get; set; }

    public virtual DbSet<Consultant> Consultants { get; set; }

    public virtual DbSet<ConsultantAvailability> ConsultantAvailabilities { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseEnrollment> CourseEnrollments { get; set; }

    public virtual DbSet<ProgramParticipant> ProgramParticipants { get; set; }

    public virtual DbSet<ProgramSurvey> ProgramSurveys { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Survey> Surveys { get; set; }

    public virtual DbSet<SurveyAnswer> SurveyAnswers { get; set; }

    public virtual DbSet<SurveyOption> SurveyOptions { get; set; }

    public virtual DbSet<SurveyQuestion> SurveyQuestions { get; set; }

    public virtual DbSet<SurveyResult> SurveyResults { get; set; }

    public virtual DbSet<SystemUserAccount> SystemUserAccounts { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);

    //    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
    //        => optionsBuilder.UseSqlServer("Data Source=duyen9904\\SQLEXPRESS;Initial Catalog=SE18_PRN232_SE1731_G2_MaToe;Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.AppointmentId).HasName("PK__Appointm__8ECDFCC2FD135311");

            entity.ToTable("Appointment");

            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");

            entity.HasOne(d => d.Consultant).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK__Appointme__Consu__6477ECF3");

            entity.HasOne(d => d.User).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Appointme__UserI__6383C8BA");
        });

        modelBuilder.Entity<Blog>(entity =>
        {
            entity.HasKey(e => e.BlogId).HasName("PK__Blog__54379E30A2F075EA");

            entity.ToTable("Blog");

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Title).HasMaxLength(200);

            entity.HasOne(d => d.Author).WithMany(p => p.Blogs)
                .HasForeignKey(d => d.AuthorId)
                .HasConstraintName("FK__Blog__AuthorId__3F466844");
        });

        modelBuilder.Entity<CommunityProgram>(entity =>
        {
            entity.HasKey(e => e.ProgramId).HasName("PK__Communit__752560588949C84F");

            entity.ToTable("CommunityProgram");

            entity.Property(e => e.TargetGroup).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(200);
        });

        modelBuilder.Entity<Consultant>(entity =>
        {
            entity.HasKey(e => e.ConsultantId).HasName("PK__Consulta__E5B83F597FEB4AEE");

            entity.ToTable("Consultant");

            entity.HasIndex(e => e.UserId, "UQ__Consulta__1788CC4D6924E6BA").IsUnique();

            entity.Property(e => e.Specialization).HasMaxLength(255);

            entity.HasOne(d => d.User).WithOne(p => p.Consultant)
                .HasForeignKey<Consultant>(d => d.UserId)
                .HasConstraintName("FK__Consultan__UserI__5DCAEF64");
        });

        modelBuilder.Entity<ConsultantAvailability>(entity =>
        {
            entity.HasKey(e => e.AvailabilityId).HasName("PK__Consulta__DA3979B11B9569A2");

            entity.ToTable("ConsultantAvailability");

            entity.HasOne(d => d.Consultant).WithMany(p => p.ConsultantAvailabilities)
                .HasForeignKey(d => d.ConsultantId)
                .HasConstraintName("FK__Consultan__Consu__60A75C0F");
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasKey(e => e.CourseId).HasName("PK__Course__C92D71A7FCBDB513");

            entity.ToTable("Course");

            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.TargetGroup).HasMaxLength(100);
            entity.Property(e => e.Title).HasMaxLength(200);
        });

        modelBuilder.Entity<CourseEnrollment>(entity =>
        {
            entity.HasKey(e => e.EnrollmentId).HasName("PK__CourseEn__7F68771B13C77033");

            entity.ToTable("CourseEnrollment");

            entity.Property(e => e.EnrolledAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Progress).HasDefaultValue(0);

            entity.HasOne(d => d.Course).WithMany(p => p.CourseEnrollments)
                .HasForeignKey(d => d.CourseId)
                .HasConstraintName("FK__CourseEnr__Cours__46E78A0C");

            entity.HasOne(d => d.User).WithMany(p => p.CourseEnrollments)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__CourseEnr__UserI__45F365D3");
        });

        modelBuilder.Entity<ProgramParticipant>(entity =>
        {
            entity.HasKey(e => e.ProgramParticipantId).HasName("PK__ProgramP__869E3B693225D987");

            entity.ToTable("ProgramParticipant");

            entity.Property(e => e.JoinedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramParticipants)
                .HasForeignKey(d => d.ProgramId)
                .HasConstraintName("FK__ProgramPa__Progr__6A30C649");

            entity.HasOne(d => d.User).WithMany(p => p.ProgramParticipants)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__ProgramPa__UserI__6B24EA82");
        });

        modelBuilder.Entity<ProgramSurvey>(entity =>
        {
            entity.HasKey(e => e.ProgramSurveyId).HasName("PK__ProgramS__A9FC9B0E131D05CF");

            entity.ToTable("ProgramSurvey");

            entity.Property(e => e.Type).HasMaxLength(50);

            entity.HasOne(d => d.Program).WithMany(p => p.ProgramSurveys)
                .HasForeignKey(d => d.ProgramId)
                .HasConstraintName("FK__ProgramSu__Progr__6EF57B66");

            entity.HasOne(d => d.Survey).WithMany(p => p.ProgramSurveys)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__ProgramSu__Surve__6FE99F9F");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("PK__Role__8AFACE1A2C01D91F");

            entity.ToTable("Role");

            entity.HasIndex(e => e.RoleName, "UQ__Role__8A2B616047E236C4").IsUnique();

            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Survey>(entity =>
        {
            entity.HasKey(e => e.SurveyId).HasName("PK__Survey__A5481F7D6FF28A7B");

            entity.ToTable("Survey");

            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<SurveyAnswer>(entity =>
        {
            entity.HasKey(e => e.AnswerId).HasName("PK__SurveyAn__D48250045AA748EE");

            entity.ToTable("SurveyAnswer");

            entity.HasOne(d => d.Option).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.OptionId)
                .HasConstraintName("FK__SurveyAns__Optio__59FA5E80");

            entity.HasOne(d => d.Question).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__SurveyAns__Quest__59063A47");

            entity.HasOne(d => d.Result).WithMany(p => p.SurveyAnswers)
                .HasForeignKey(d => d.ResultId)
                .HasConstraintName("FK__SurveyAns__Resul__5812160E");
        });

        modelBuilder.Entity<SurveyOption>(entity =>
        {
            entity.HasKey(e => e.OptionId).HasName("PK__SurveyOp__92C7A1FF8B8BAA4A");

            entity.ToTable("SurveyOption");

            entity.Property(e => e.OptionText).HasMaxLength(255);

            entity.HasOne(d => d.Question).WithMany(p => p.SurveyOptions)
                .HasForeignKey(d => d.QuestionId)
                .HasConstraintName("FK__SurveyOpt__Quest__5070F446");
        });

        modelBuilder.Entity<SurveyQuestion>(entity =>
        {
            entity.HasKey(e => e.QuestionId).HasName("PK__SurveyQu__0DC06FAC0C6589D7");

            entity.ToTable("SurveyQuestion");

            entity.Property(e => e.QuestionType).HasMaxLength(20);

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyQuestions)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__SurveyQue__Surve__4D94879B");
        });

        modelBuilder.Entity<SurveyResult>(entity =>
        {
            entity.HasKey(e => e.ResultId).HasName("PK__SurveyRe__97690208D69EB8C9");

            entity.ToTable("SurveyResult");

            entity.Property(e => e.TakenAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Survey).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.SurveyId)
                .HasConstraintName("FK__SurveyRes__Surve__5441852A");

            entity.HasOne(d => d.User).WithMany(p => p.SurveyResults)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__SurveyRes__UserI__534D60F1");
        });

        modelBuilder.Entity<SystemUserAccount>(entity =>
        {
            entity.HasKey(e => e.UserAccountId);

            entity.ToTable("System.UserAccount");

            entity.Property(e => e.UserAccountId).HasColumnName("UserAccountID");
            entity.Property(e => e.ApplicationCode).HasMaxLength(50);
            entity.Property(e => e.CreatedBy).HasMaxLength(50);
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(150);
            entity.Property(e => e.EmployeeCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.ModifiedBy).HasMaxLength(50);
            entity.Property(e => e.ModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Phone)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.RequestCode).HasMaxLength(50);
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__User__1788CC4CEC6C0076");

            entity.ToTable("User");

            entity.HasIndex(e => e.Email, "UQ__User__A9D10534EB1E47B0").IsUnique();

            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.Gender).HasMaxLength(10);
            entity.Property(e => e.PasswordHash).HasMaxLength(255);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("FK__User__RoleId__3B75D760");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}